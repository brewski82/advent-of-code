(defpackage #:advent-2024-day-9
  (:use #:common-lisp #:alexandria #:cl-ppcre)
  (:import-from #:metabang-bind #:bind)
  (:import-from #:arrow-macros #:->> #:-> #:-> #:some->>)
  (:import-from #:serapeum #:append1)
  (:import-from #:nclasses #:define-class)
  (:import-from #:access #:access #:accesses #:set-access))

(in-package #:advent-2024-day-9)

(define-class disk-block ()
  (file-id block-type size))

(define-class disk ()
  ((blocks :initform (make-array 0 :fill-pointer t :adjustable t))
   start-ptr
   end-ptr))

(defmethod print-object ((obj disk-block) out)
  (print-unreadable-object (obj out :type t)
    (format out "~A-~A-~A"
            (file-id obj)
            (size obj)
            (block-type obj))))

(defun day-9-part-1 ()
  (bind ((disk (read-disk-from-input "~/Downloads/input-9")))
    (defrag disk)
    (calculate-checksum disk)))

(defun calculate-checksum (disk)
  (loop with i = 0
        for disk-block across (blocks disk)
        when (plusp (size disk-block))
          summing (loop repeat (size disk-block)
                      when (eq :file (block-type disk-block))
                        sum (* i (file-id disk-block))
                      do (incf i))))

(defun make-file-disk-block (&rest keys)
  (apply #'make-instance 'disk-block :block-type :file keys ))

(defun make-free-disk-block (&rest keys)
  (apply #'make-instance 'disk-block :block-type :free keys ))

(defun read-disk-from-input (path)
  (loop with disk = (make-instance 'disk :start-ptr 0)
        with file-id = 0
        for char across (first (uiop:read-file-lines path))
        for digit = (digit-char-p char)
        for file-p = t then (not file-p)
        when file-p
          do (vector-push-extend (make-file-disk-block :file-id file-id :size digit)
                                 (blocks disk))
             (incf file-id)
        else when (plusp digit)
          do (vector-push-extend (make-free-disk-block :size digit)
                                 (blocks disk))
        finally (setf (end-ptr disk) (1- (length (blocks disk))))
                (return disk)))

(defun defrag (disk)
  (loop for start-ptr = (start-ptr disk)
        for disk-block = (access (blocks disk) (start-ptr disk))
        while (< start-ptr (length (blocks disk)))
        when (and (eq :free (block-type disk-block))
                  (plusp (size disk-block)))
          do (move-file-to-free-space disk disk-block)
        do (incf (start-ptr disk))))

(defun move-file-to-free-space (disk free-disk-block)
  (when-let* ((file-disk-block (find-candidate disk))
              (file-size (size file-disk-block))
              (free-space-size (size free-disk-block))
              (delta (min file-size free-space-size)))
    (decf (size file-disk-block) delta)
    (decf (size free-disk-block) delta)
    (incf (end-ptr disk))
    (setf (blocks disk)
          (serapeum:splice-seq (blocks disk)
                               :new (vector (make-file-disk-block
                                             :file-id (file-id file-disk-block)
                                             :size delta))
                               :start (start-ptr disk)
                               :end (start-ptr disk)))))

(defun find-candidate (disk)
  (loop for end-ptr = (end-ptr disk)
        for disk-block = (access (blocks disk) (end-ptr disk))
        when (<= end-ptr (start-ptr disk))
          do (return nil)
        when (and (plusp (size disk-block))
                  (eq :file (block-type disk-block)))
          do (return disk-block)
        do (decf (end-ptr disk))))

(defun defrag-2 (disk)
  (loop for end-ptr = (end-ptr disk)
        while (>= end-ptr 0)
        for disk-block = (access (blocks disk) (end-ptr disk))

        when (and (eq :file (block-type disk-block))
                  (plusp (size disk-block)))
          do (move-file-to-free-space-2 disk disk-block)
        when (zerop (end-ptr disk))  do (return)
        do (decf (end-ptr disk))))

(defun move-file-to-free-space-2 (disk file-disk-block)
  (when-let* ((free-disk-block (find-candidate-2 disk file-disk-block))
              (file-size (size file-disk-block))
              (free-space-size (size free-disk-block))
              (delta (min file-size free-space-size)))
    (setf (blocks disk)
          (serapeum:splice-seq (blocks disk)
                               :new (vector (make-free-disk-block
                                             :size (size file-disk-block)))
                               :start (end-ptr disk)
                               :end (1+ (end-ptr disk))))
    (decf (size free-disk-block) delta)
    (setf (blocks disk)
          (serapeum:splice-seq (blocks disk)
                               :new (vector (make-file-disk-block
                                             :file-id (file-id file-disk-block)
                                             :size delta))
                               :start (start-ptr disk)
                               :end (+ (start-ptr disk)
                                       (if (zerop (size free-disk-block))
                                           1
                                           0))))
    (unless (zerop (size free-disk-block))
      (incf (end-ptr disk)))))

(defun find-candidate-2 (disk file-disk-block)
  (setf (start-ptr disk) 0)
  (loop for start-ptr = (start-ptr disk)
        for free-disk-block = (access (blocks disk) start-ptr)
        when (>= start-ptr (end-ptr disk))
          do (return nil)
        when (and (plusp (size free-disk-block))
                  (eq :free (block-type free-disk-block))
                  (>= (size free-disk-block)
                      (size file-disk-block)))
          do (return free-disk-block)
        do (incf (start-ptr disk))))

(defun day-9-part-2 ()
  (bind ((disk (read-disk-from-input "~/Downloads/input-9")))
    (defrag-2 disk)
    (calculate-checksum disk)))
